{"version":3,"sources":["assets/brand-name.jpg","components/ProductItem/index.js","utils/actions.js","utils/reducers.js","utils/GlobalState.js","utils/queries.js","utils/helpers.js","components/ProductList/index.js","components/Jumbotron/index.js","pages/Home.js","pages/Detail.js","pages/NoMatch.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","components/CartItem/index.js","pages/Cart.js","App.js","index.js"],"names":["ProductItem","item","image","name","_id","className","to","alt","src","UPDATE_PRODUCTS","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","reducer","state","action","type","products","cartOpen","cart","product","map","purchaseQuantity","newState","filter","length","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductList","useQuery","loading","data","useEffect","forEach","then","category","price","quantity","Jumbotron","children","Home","Detail","id","useParams","useState","currentProduct","setCurrentProduct","find","indexedProducts","description","onClick","itemInCart","cartItem","parseInt","alert","NoMatch","role","LOGIN","ADD_ORDER","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","a","preventDefault","variables","mutationResponse","Auth","handleChange","target","onSubmit","htmlFor","placeholder","onChange","Signup","addUser","firstName","lastName","Nav","categoryData","require","default","loggedIn","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","CartItem","removeFromCart","Cart","loadStripe","getCheckout","getCart","sum","toFixed","calculateTotal","productIds","i","push","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93bb7d94.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/brand-name.65b5fd67.jpg\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction ProductItem(item) {\r\n\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n  } = item;\r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p>{name}</p>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\n\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\r\nexport const TOGGLE_CART = \"TOGGLE_CART\";\r\n\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\n","import { useReducer } from 'react';\r\nimport {\r\n  UPDATE_PRODUCTS,\r\n  ADD_TO_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  REMOVE_FROM_CART,\r\n  ADD_MULTIPLE_TO_CART,\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n  CLEAR_CART,\r\n  TOGGLE_CART,\r\n} from './actions';\r\n\r\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\r\n    case UPDATE_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        products: [...action.products],\r\n      };\r\n\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.product],\r\n      };\r\n    case ADD_MULTIPLE_TO_CART:\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.products],\r\n      };\r\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\r\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\r\n    case UPDATE_CART_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map((product) => {\r\n          if (action._id === product._id) {\r\n            product.purchaseQuantity = action.purchaseQuantity;\r\n          }\r\n          return product;\r\n        }),\r\n      };\r\n\r\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\r\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\r\n    case REMOVE_FROM_CART:\r\n      let newState = state.cart.filter((product) => {\r\n        return product._id !== action._id;\r\n      });\r\n\r\n      // Then we return a copy of state and check to see if the cart is empty.\r\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\r\n      return {\r\n        ...state,\r\n        cartOpen: newState.length > 0,\r\n        cart: newState,\r\n      };\r\n\r\n    case CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: [],\r\n      };\r\n\r\n    case TOGGLE_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen,\r\n      };\r\n\r\n    case UPDATE_CATEGORIES:\r\n      return {\r\n        ...state,\r\n        categories: [...action.categories],\r\n      };\r\n\r\n    case UPDATE_CURRENT_CATEGORY:\r\n      return {\r\n        ...state,\r\n        currentCategory: action.currentCategory,\r\n      };\r\n\r\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\r\n    // This saves us from a crash.\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function useProductReducer(initialState) {\r\n  return useReducer(reducer, initialState);\r\n}\r\n","import React, { createContext, useContext } from \"react\";\r\nimport { useProductReducer } from './reducers'\r\n\r\nconst StoreContext = createContext();\r\nconst { Provider } = StoreContext;\r\n\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n  const [state, dispatch] = useProductReducer({\r\n    products: [],\r\n    cart: [],\r\n    cartOpen: false,\r\n    categories: [],\r\n    currentCategory: '',\r\n  });\r\n\r\n  return <Provider value={[state, dispatch]} {...props} />;\r\n};\r\n\r\nconst useStoreContext = () => {\r\n  return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($products: [ID]!) {\r\n    checkout(products: $products) {\r\n      session\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n  {\r\n    categories {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n  {\r\n    user {\r\n      firstName\r\n      lastName\r\n      orders {\r\n        _id\r\n        purchaseDate\r\n        products {\r\n          _id\r\n          name\r\n          description\r\n          price\r\n          quantity\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export function pluralize(name, count) {\r\n    if (count === 1) {\r\n      return name;\r\n    }\r\n    return name + 's';\r\n  }\r\n\r\nexport function idbPromise(storeName, method, object) {\r\n    return new Promise((resolve, reject) => {\r\n      const request = window.indexedDB.open('shop-shop', 1);\r\n      let db, tx, store;\r\n      request.onupgradeneeded = function(e) {\r\n        const db = request.result;\r\n        db.createObjectStore('products', { keyPath: '_id' });\r\n        db.createObjectStore('categories', { keyPath: '_id' });\r\n        db.createObjectStore('cart', { keyPath: '_id' });\r\n      };\r\n  \r\n      request.onerror = function(e) {\r\n        console.log('There was an error');\r\n      };\r\n  \r\n      request.onsuccess = function(e) {\r\n        db = request.result;\r\n        tx = db.transaction(storeName, 'readwrite');\r\n        store = tx.objectStore(storeName);\r\n  \r\n        db.onerror = function(e) {\r\n          console.log('error', e);\r\n        };\r\n  \r\n        switch (method) {\r\n          case 'put':\r\n            store.put(object);\r\n            resolve(object);\r\n            break;\r\n          case 'get':\r\n            const all = store.getAll();\r\n            all.onsuccess = function() {\r\n              resolve(all.result);\r\n            };\r\n            break;\r\n          case 'delete':\r\n            store.delete(object._id);\r\n            break;\r\n          default:\r\n            console.log('No valid method');\r\n            break;\r\n        }\r\n  \r\n        tx.oncomplete = function() {\r\n          db.close();\r\n        };\r\n      };\r\n    });\r\n  }","import React, { useEffect } from 'react';\r\nimport ProductItem from '../ProductItem';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_PRODUCTS } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nfunction ProductList() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { currentCategory } = state;\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise('products', 'get').then((products) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products,\r\n        });\r\n      });\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n\r\n    return state.products.filter(\r\n      (product) => product.category._id === currentCategory\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      {state.products.length ? (\r\n        <div className=\"flex-row-product-list\">\r\n          {filterProducts().map((product) => (\r\n            <ProductItem\r\n              key={product._id}\r\n              _id={product._id}\r\n              image={product.image}\r\n              name={product.name}\r\n              price={product.price}\r\n              quantity={product.quantity}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet</h3>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <p>Shopping online has never been so easy</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <Jumbotron />\r\n      <ProductList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Alert } from 'react-alert'\r\nimport { useQuery } from '@apollo/client';\r\nimport { useStoreContext } from '../utils/GlobalState';\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART,\r\n  UPDATE_PRODUCTS,\r\n} from '../utils/actions';\r\nimport { QUERY_PRODUCTS } from '../utils/queries';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\n\r\nfunction Detail() {\r\n  const [state, dispatch] = useStoreContext();\r\n  const { id } = useParams();\r\n\r\n  const [currentProduct, setCurrentProduct] = useState({});\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  const { products, cart } = state;\r\n\r\n  useEffect(() => {\r\n    // already in global store\r\n    if (products.length) {\r\n      setCurrentProduct(products.find((product) => product._id === id));\r\n    }\r\n    // retrieved from server\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n\r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('products', 'get').then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts,\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\r\n    if (itemInCart) {\r\n      \r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n      alert('added item to cart')\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 }\r\n        ,\r\n      });\r\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\r\n      alert('added item to cart')\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentProduct && cart ? (\r\n        <div className=\"flex-row details\">\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n\r\n          <div>\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>{currentProduct.description}</p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>${currentProduct.price}{' '}\r\n            <button onClick={addToCart}>Add to Cart</button>\r\n          </p>\r\n\r\n    \r\n          </div>\r\n\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($products: [ID]!) {\r\n    addOrder(products: $products) {\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        category {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser(\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    addUser(\r\n      firstName: $firstName\r\n      lastName: $lastName\r\n      email: $email\r\n      password: $password\r\n    ) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n","// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { LOGIN } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Login(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({\r\n        variables: { email: formState.email, password: formState.password },\r\n      });\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n     \r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"password\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {error ? (\r\n          <div>\r\n            <p className=\"error-text\">Incorrect Login Information</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser, {error} ] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n    const {data} = await addUser({\r\n      variables: {\r\n        email: formState.email,\r\n        password: formState.password,\r\n        firstName: formState.firstName,\r\n        lastName: formState.lastName,\r\n      },\r\n    });\r\n    const token = data.addUser.token;\r\n    Auth.login(token);\r\n    }\r\n\r\n    catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React, { useEffect } from 'react';\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport {\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n} from '../../utils/actions';\r\nimport { QUERY_CATEGORIES } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nfunction Nav() {\r\n\r\n    const [state, dispatch] = useStoreContext();\r\n\r\n  const { categories } = state;\r\n\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  useEffect(() => {\r\n    if (categoryData) {\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories,\r\n      });\r\n      categoryData.categories.forEach((category) => {\r\n        idbPromise('categories', 'put', category);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise('categories', 'get').then((categories) => {\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories,\r\n        });\r\n      });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n  const handleClick = (id) => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id,\r\n    });\r\n  };\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"nav-link\">\r\n            <Link to=\"/orderHistory\">\r\n              Orders\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-link\">\r\n            <Link to=\"/cart\">\r\n              Cart\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-link\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"nav-link\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-link\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-link\">\r\n            <Link to=\"/cart\">\r\n              Cart\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n\r\n        \r\n\r\n        \r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    \r\n    <header className=\"flex-row\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          <img src={require('../../assets/brand-name.jpg').default} alt='S&W Goods'></img>\r\n        </Link>\r\n      </h1>\r\n<div className=\"flex-row header\">\r\n{categories.map((item) => (\r\n  <button\r\n    key={item._id}\r\n    onClick={() => {\r\n      handleClick(item._id);\r\n    }}\r\n  >\r\n    {item.name}\r\n  </button>\r\n))}\r\n</div>\r\n\r\n      <nav className=\"nav-links\">\r\n        {showNavigation()}\r\n      </nav>\r\n\r\n    </header>\r\n\r\n\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\nfunction Success() {\r\n  const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n  useEffect(() => {\r\n    async function saveOrder() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      const products = cart.map((item) => item._id);\r\n\r\n      if (products.length) {\r\n        const { data } = await addOrder({ variables: { products } });\r\n        const productData = data.addOrder.products;\r\n\r\n        productData.forEach((item) => {\r\n          idbPromise('cart', 'delete', item);\r\n        });\r\n      }\r\n\r\n      setTimeout(() => {\r\n        window.location.assign('/');\r\n      }, 3000);\r\n    }\r\n\r\n    saveOrder();\r\n  }, [addOrder]);\r\n\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>Success!</h1>\r\n        <h2>Thank you for your purchase!</h2>\r\n        <h2>You will now be redirected to the home page</h2>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Success;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_USER } from '../utils/queries';\r\n\r\nfunction OrderHistory() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">← Back to Products</Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>\r\n              Order History for {user.firstName} {user.lastName}\r\n            </h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>\r\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\r\n                </h3>\r\n                <div className=\"flex-row\">\r\n                  {order.products.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/products/${_id}`}>\r\n                        <img alt={name} src={`/images/${image}`} />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OrderHistory;\r\n","import React from 'react';\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nconst CartItem = ({ item }) => {\r\n\r\n  const [, dispatch] = useStoreContext();\r\n\r\n  const removeFromCart = item => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id\r\n    });\r\n    idbPromise('cart', 'delete', { ...item });\r\n\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n    if (value === '0') {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id\r\n      });\r\n      idbPromise('cart', 'delete', { ...item });\r\n\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value)\r\n      });\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img\r\n          src={`/images/${item.image}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div>{item.name}, ${item.price}</div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />\r\n          <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}\r\n          >\r\n            remove item\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CartItem;","import React, { useEffect } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_ORDER} from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\nimport CartItem from '../components/CartItem/index';\r\nimport Auth from '../utils/auth';\r\nimport { useStoreContext } from '../utils/GlobalState';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../utils/actions';\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\nconst Cart = () => {\r\n  const [state, dispatch] = useStoreContext();\r\n  const [getCheckout, { data }] = useMutation(ADD_ORDER);\r\n\r\n  // useEffect(() => {\r\n  //   if (data) {\r\n  //     stripePromise.then((res) => {\r\n  //       res.redirectToCheckout({ sessionId: data.checkout.session });\r\n  //     });\r\n  //   }\r\n  // }, [data]);\r\n\r\n  useEffect(() => {\r\n    async function getCart() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n    }\r\n\r\n    if (!state.cart.length) {\r\n      getCart();\r\n    }\r\n  }, [state.cart.length, dispatch]);\r\n\r\n  function toggleCart() {\r\n    dispatch({ type: TOGGLE_CART });\r\n  }\r\n\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach((item) => {\r\n      sum += item.price * item.purchaseQuantity;\r\n    });\r\n    return sum.toFixed(2);\r\n  }\r\n\r\n  function submitCheckout() {\r\n    const productIds = [];\r\n    console.log('checkout')\r\n    alert('checkout successful')\r\n    state.cart.forEach((item) => {\r\n      for (let i = 0; i < item.purchaseQuantity; i++) {\r\n        productIds.push(item._id);\r\n      }\r\n      \r\n    });\r\n\r\n    console.log(productIds)\r\n\r\n    getCheckout({\r\n      variables: { products: productIds },\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <h2>Shopping Cart</h2>\r\n      {state.cart.length ? (\r\n        <div>\r\n          {state.cart.map((item) => (\r\n            <CartItem key={item._id} item={item} />\r\n          ))}\r\n\r\n          <div className=\"flex-row space-between\">\r\n            <strong>Total: ${calculateTotal()}</strong>\r\n\r\n            {Auth.loggedIn() ? (\r\n              <button onClick={submitCheckout}>Checkout</button>\r\n            ) : (\r\n              <span>log in to check out</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n         There is no items in your cart.\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nimport Home from './pages/Home';\r\nimport Detail from './pages/Detail';\r\nimport NoMatch from './pages/NoMatch';\r\nimport Login from './pages/Login';\r\nimport Signup from './pages/Signup';\r\nimport Nav from './components/Nav';\r\nimport { StoreProvider } from './utils/GlobalState';\r\nimport Success from './pages/Success';\r\nimport OrderHistory from './pages/OrderHistory';\r\nimport Cart from './pages/Cart'\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          <StoreProvider>\r\n            <Nav />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/cart\" component={Cart} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/signup\" component={Signup} />\r\n              <Route exact path=\"/success\" component={Success} />\r\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n              <Route exact path=\"/products/:id\" component={Detail} />\r\n              <Route component={NoMatch} />\r\n            </Switch>\r\n          </StoreProvider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}